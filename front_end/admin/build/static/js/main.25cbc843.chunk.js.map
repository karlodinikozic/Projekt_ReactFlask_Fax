{"version":3,"sources":["logo.svg","components/StudentsNeedHelp.js","components/HomePage.js","components/Login.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Alert","border","margin","padding","width","color","backgroundColor","StudentsNeedHelp","useState","studentsNeedHelp","setStudentsNeedHelp","callEvery10","useEffect","checkNewStudents","axios","get","then","res","console","log","data","onClick","length","style","container","maring","HomePage","Login","props","username","setUsername","password","setPassword","type","placeholder","onChange","e","target","value","history","push","Main","path","exact","component","centerMid","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,4JCoC3C,IAAMC,EAAQ,CACVC,OAAS,gBACTC,OAAS,YACTC,QAAS,QACTC,MAAO,MACPC,MAAM,QACNC,gBAAgB,OAELC,EAzCf,WAA6B,IAAD,EACwBC,mBAAS,IADjC,mBACjBC,EADiB,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAEjBG,EAFiB,UAGxBC,qBAAU,WAENC,MAEF,CAACF,IAEH,IAAME,EAAmB,WACrBC,IAAMC,IAAI,sDACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChBV,EAAoBO,EAAIG,UAGhC,OACI,6BACI,6BACI,4BAAQC,QAASR,GAAjB,gCAGAJ,EAAiBa,OAAO,EACxB,yBAAKC,MAAOvB,GACPS,EAAiBa,OADtB,qBAIA,uEChBhB,IAAME,EAAY,CACdC,OAAO,UACPtB,QAAS,KACTF,OAAO,kBACPG,MAAM,SAGKsB,EAlBf,WACI,OACI,6BAEI,yBAAKH,MAASC,GACV,yCACA,kBAAC,EAAD,SC2BhB,IAAMA,EAAY,CACdC,OAAO,UACPtB,QAAS,KACTF,OAAO,kBACPG,MAAM,SAIKuB,EA1Cf,SAAeC,GAAQ,IAAD,EAEYpB,mBAAS,IAFrB,mBAEZqB,EAFY,KAEHC,EAFG,OAGYtB,mBAAS,IAHrB,mBAGZuB,EAHY,KAGHC,EAHG,KAYlB,OACI,6BACI,yBAAKT,MAAOC,GACR,4CACA,yBAAKD,MAAOC,GACR,6DACA,6BACA,2BAAOS,KAAK,OAAOC,YAAY,WAAWC,SAAU,SAACC,GAAD,OAAKN,EAAYM,EAAEC,OAAOC,UAC9E,6BACA,6DACA,6BACA,2BAAOL,KAAK,WAAWC,YAAY,WAAWC,SAAU,SAACC,GAAD,OAAKJ,EAAYI,EAAEC,OAAOC,UAClF,6BACA,6BACA,4BAAQjB,QArBJ,WACA,UAAbQ,GAAoC,OAAZE,IACvBb,QAAQC,IAAI,wBACZS,EAAMW,QAAQC,KAAK,YAkBX,aCNLC,MAhBf,WACI,OACI,6BACI,kBAAC,IAAD,KAEL,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,QAASE,UAAWlB,QCAxC,IAAMmB,EAAU,CACdpB,OAAO,UAEMqB,EAXf,WACE,OACE,yBAAKvB,MAAOsB,EAAWE,UAAU,OAChC,kBAAC,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.25cbc843.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction StudentsNeedHelp() {\r\n    const [studentsNeedHelp, setStudentsNeedHelp] = useState([])\r\n    const [callEvery10,setCallEvery10] = useState({})\r\n    useEffect(()=>{\r\n        \r\n        checkNewStudents()\r\n        //setInterval(() => setCallEvery10({ time: Date.now()}), 10000)\r\n    },[callEvery10])\r\n\r\n    const checkNewStudents = ()=>{\r\n        axios.get(\"https://kdkman.pythonanywhere.com/studentsNeedHelp\")\r\n        .then(res=>{\r\n            console.log(res.data)\r\n            setStudentsNeedHelp(res.data)}\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={checkNewStudents}>Check if students need help</button>\r\n            </div>\r\n            {\r\n                studentsNeedHelp.length>0?\r\n                <div style={Alert}>\r\n                    {studentsNeedHelp.length} treba pomoć\r\n                    \r\n                </div>:\r\n                <h2>Nema studenta kojima treba pomoć</h2>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Alert = {\r\n    border : \"5px solid red\",\r\n    margin : \"10px auto\",\r\n    padding: \"10 px\",\r\n    width: \"50%\",\r\n    color:\"white\",\r\n    backgroundColor:'red'\r\n}\r\nexport default StudentsNeedHelp\r\n","import React from 'react'\r\nimport StudentsNeedHelp from './StudentsNeedHelp'\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div>\r\n            \r\n            <div style = {container}>\r\n                <h1>Home Page</h1>\r\n                <StudentsNeedHelp/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst container = {\r\n    maring:\"0 auto \",\r\n    padding: \"10\",\r\n    border:\"1px solid black\",\r\n    width:\"960px\",\r\n\r\n}\r\nexport default HomePage\r\n","import React, { useEffect,useState } from 'react'\r\n\r\nfunction Login(props) {\r\n\r\n    const[username,setUsername] = useState('')\r\n    const[password,setPassword] = useState('')\r\n    \r\n    const logInHandler =()=>{\r\n        if(username === \"admin\" && password == \"123\"){\r\n            console.log(\"Admin Loging Success\")\r\n            props.history.push('/home')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={container}>\r\n                <h1>Please Login</h1>\r\n                <div style={container}>\r\n                    <label>Please enter your username</label>\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"username\" onChange={(e)=>setUsername(e.target.value)} />\r\n                    <br/>\r\n                    <label>Please enter your password</label>\r\n                    <br/>\r\n                    <input type=\"password\" placeholder=\"password\" onChange={(e)=>setPassword(e.target.value)} />\r\n                    <br/>\r\n                    <br/>\r\n                    <button onClick={logInHandler}>Login</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst container = {\r\n    maring:\"0 auto \",\r\n    padding: \"10\",\r\n    border:\"1px solid black\",\r\n    width:\"960px\",\r\n\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport {Link,Route,BrowserRouter as Router, Switch} from 'react-router-dom'\r\nimport HomePage from './HomePage'\r\nimport Login from './Login'\r\n\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n            <Router>\r\n       \r\n       <Switch>\r\n        <Route path=\"/\" exact component={Login}/>\r\n        <Route path=\"/home\"  component={HomePage}/>\r\n\r\n       </Switch>\r\n       \r\n      </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={centerMid} className=\"App\">\r\n     <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst centerMid={\r\n  maring:\"0 auto\"\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}